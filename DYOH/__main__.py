import logging
import asyncio
import glob
from pathlib import Path
from telethon import Button
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.channels import InviteToChannelRequest
from DYOH.utils import load_plugins
from DYOH import ubots, dybot, GROUP_ID  # Ensure these are valid Telebot instances
from config import UPIC, ubotversion , UPDATES_CHANNEL , OWNER_USERNAME 
from telethon import __version__ 
from platform import python_version

OWNER_ID = "raoxc"

# Logging configuration
logging.basicConfig(format='[%(levelname) 5s/%(asctime)s] %(name)s: %(message)s', level=logging.INFO)

text = "**·¥ú ô·¥è·¥õ ·¥ÄÍú±Íú±…™Íú±·¥õ·¥Ä…¥·¥õ …™Íú± ·¥è…¥ ü…™…¥·¥á**\n\n"
pm_caption = f"·¥ú ô·¥è·¥õ ·¥†·¥á ÄÍú±…™·¥è…¥ `{ubotversion}`\n"
pm_caption += f"·¥ò è·¥õ ú·¥è…¥ ·¥†·¥á ÄÍú±…™·¥è…¥ `{python_version()}\n"
pm_caption += f"·¥õ·¥á ü·¥á·¥õ ú·¥è…¥ ·¥†·¥á ÄÍú±…™·¥è…¥ `{__version__}\n"
pm_caption += f"·¥Ö è·¥è ú ·¥ú ô·¥è·¥õ Íú±·¥è·¥ú Ä·¥Ñ·¥á [·¥Ñ ü…™·¥Ñ·¥ã](https://github.com/OFFICIALHACKERERA)\n\n"
pm_caption += f"·¥ú ô·¥è·¥õ Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è!"
text += pm_caption





# Load all plugins
def load_all_plugins():
    paths = ["DYOH/plugins/*.py", "DYOH/assistant/*.py"]
    for path in paths:
        files = glob.glob(path)
        if not files:
            logging.warning(f"No plugins found in {path}.")
        for name in files:
            plugin_name = Path(name).stem
            try:
                load_plugins(plugin_name)
                logging.info(f"[DYOH UBOT] ‚úÖ Loaded plugin: {plugin_name}")
            except Exception as e:
                logging.error(f"[DYOH UBOT] ‚ùå Failed to load plugin {plugin_name}: {e} üí•")

async def start_bot(bot_instance, name):
    logging.info(f"[DYOH UBOT] üî∞ Starting {name}... üíØ")
    try:
        await bot_instance.start()
        logging.info(f"[DYOH UBOT] üåê {name} is running... ")
    except Exception as e:
        logging.error(f"‚ö†Ô∏è Failed to start {name}: {e}‚ùå")




               

async def start_ubots():
    for ubot in ubots:
        try:
            await ubot.start()
            logging.info("‚ú® Userbot is running...")
            logging.info("üî∞ Session started: %s ‚ô¶Ô∏è", ubot.session)

            # Send the startup message to the owner
            message = "üåê DYOH UBOT HAS STARTED SUCCESSFULLY!"
            await ubot.send_message(OWNER_ID, message)  # Sending message to the owner
            logging.info("[DYOH UBOT] ‚úÖ Startup message sent successfully!")

            # Automatically join the channel and group
            try:
                await ubot(JoinChannelRequest(channel='DYOH_UBOT'))  # Replace with your channel's username
                logging.info("[DYOH UBOT] ‚úÖ Joined the channel successfully!")
            except Exception as e:
                logging.error(f"[DYOH UBOT] ‚ùå Failed to join channel: {e}")

            try:
                await ubot(JoinChannelRequest(channel='DYOH_UBOT_CHAT'))  # Replace with your group's username
                logging.info("[DYOH UBOT] ‚úÖ Joined the group successfully!")
            except Exception as e:
                logging.error(f"[DYOH UBOT] ‚ùå Failed to join group: {e}")

            await ubots.run_until_disconnected()  # Keep Ubot running

        except Exception as e:
            logging.error(f"Failed to start userbot {ubot}: {e}")
            
            print("üåê [DYOH UBOT] STARTED SUCCESSFULLY! ‚ú®")


async def start_dybot():
    logging.info("[DYOH UBOT] üî≥ Dybot is starting... üö©")
    try:
        await dybot.start()
        logging.info(f"[DYOH UBOT] ‚úÖ Fetching entity for group ID: {GROUP_ID}")
        group_entity = await dybot.get_entity(GROUP_ID)

        buttons = [
    [Button.url("Owner", f'https://t.me/{OWNER_USERNAME}'), Button.url("Channel", f'https://t.me/{UPDATES_CHANNEL}')]
]

        await dybot.send_file(GROUP_ID, file=UPIC, caption=text, buttons=buttons)
        logging.info("[DYOH UBOT] ‚úÖ Message sent successfully!")
        await dybot.run_until_disconnected()
    except Exception as e:
        logging.error(f"[DYOH UBOT] ‚ùå Error while running dybot: {e}")
        

async def health_check():
    while True:
        logging.info("[DYOH UBOT] üåê Checking bot statuses...")
        await asyncio.sleep(60)

async def start_all_bots():
    logging.info("[DYOH UBOT] ‚úÖ Starting all bots...")
    tasks = [start_ubots(), start_dybot(), health_check()]
    await asyncio.gather(*tasks)

def main():
    logging.info("[DYOH UBOT] ‚úÖ Loading plugins...")
    load_all_plugins()
    logging.info("[DYOH UBOT] ‚úÖ Plugins loaded.")

if __name__ == "__main__":
    main()
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(start_all_bots())  # Run all bots
    except Exception as e:
        logging.error(f"[ DYOH UBOT ] [‚ùå] Error in main event loop: {e}")